
AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template para EventBridge com API Destination"

Parameters:
  Environment:
    Type: String
    Default: "uat"
    AllowedValues:
      - dev
      - uat
      - prod
  ScheduleExpression:
    Type: String
    Default: "rate(5 minutes)"
    Description: "Frequência de execução do evento. Ex: rate(5 minutes), cron(0 12 * * ? *)"
  ApiEndpoint:
    Type: String
    Description: "URL da API que o EventBridge vai chamar"
  ApiUsername:
    Type: String
    Description: "Username para autenticação na api"
  ApiPassword:
    Type: String
    Description: "Password para autenticação na api"


Resources:
  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "custom-event-bus-${Environment}"

  ApiConnection:
    Type: AWS::Events::Connection
    Properties:
      Name: !Sub "api-connection-${Environment}"
      AuthorizationType: BASIC
      AuthParameters:
        BasicAuthParameters:
          Username: !Sub ${ApiUsername}
          Password: !Sub ${ApiPassword}

  ApiDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      Name: !Sub "api-destination-${Environment}"
      ConnectionArn: !GetAtt ApiConnection.Arn
      InvocationEndpoint: !Ref ApiEndpoint
      HttpMethod: POST

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SchedulerRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "scheduler.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "custom-event-bridge-policy-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:InvokeApiDestination"
                  - "events:PutEvents"
                Resource:
                  - !GetAtt ApiDestination.Arn
                  - !GetAtt CustomEventBus.Arn

  ScheduledEvent:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow: "OFF"
      Name: custom-event-schedule
      ScheduleExpression: !Ref ScheduleExpression
      Target:
        Arn: !GetAtt CustomEventBus.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: |
          {
            "detail-type": "ScheduledEvent",
            "source": "my.custom.source",
            "ApiEndpoint": !GetAtt ApiDestination.Arn  # Inclui o destino da API
          }
