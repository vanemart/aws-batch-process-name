AWSTemplateFormatVersion: "2010-09-09"
Resources:
  # Primeira regra de evento, disparando uma requisição HTTP com userId específico
  EventRule1:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "EventRule1"
      ScheduleExpression: "cron(0 9 * * ? *)"  # Executa todos os dias às 9h UTC
      State: "ENABLED"
      Targets:
        - Id: "HttpApiTarget1"
          Arn: !GetAtt HttpApiDestination.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn
          InputTransformer:
            InputTemplate: '{"userId": "123"}'  # Parâmetro userId para a requisição

  # Segunda regra de evento, disparando uma requisição HTTP com outro userId
  EventRule2:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "EventRule2"
      ScheduleExpression: "cron(0 12 * * ? *)"  # Executa todos os dias às 12h UTC
      State: "ENABLED"
      Targets:
        - Id: "HttpApiTarget2"
          Arn: !GetAtt HttpApiDestination.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn
          InputTransformer:
            InputTemplate: '{"userId": "456"}'  # Parâmetro userId diferente para este evento

  # Terceira regra de evento, disparando uma requisição HTTP com outro userId
  EventRule3:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "EventRule3"
      ScheduleExpression: "cron(0 15 * * ? *)"  # Executa todos os dias às 15h UTC
      State: "ENABLED"
      Targets:
        - Id: "HttpApiTarget3"
          Arn: !GetAtt HttpApiDestination.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn
          InputTransformer:
            InputTemplate: '{"userId": "789"}'  # Parâmetro userId para este evento

  # API Destination compartilhado entre todas as regras de evento, com path parameter userId
  HttpApiDestination:
    Type: "AWS::Events::ApiDestination"
    Properties: 
      Name: "HttpApiDestination"
      ConnectionArn: !GetAtt EventBridgeConnection.Arn
      InvocationEndpoint: "https://example.com/users/<userId>"  # Path parameter userId
      HttpMethod: "GET"

  # Conexão única compartilhada entre todos os eventos
  EventBridgeConnection:
    Type: "AWS::Events::Connection"
    Properties: 
      Name: "SharedEventBridgeConnection"
      AuthorizationType: "API_KEY"
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: "x-api-key"
          ApiKeyValue: "SUA_API_KEY_AQUI"  # Substitua pela sua API Key

  # Função IAM para o EventBridge invocar destinos HTTP
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EventBridgeRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "scheduler.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EventBridgeRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:InvokeApiDestination"
                  - "events:PutEvents"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:AttachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                Resource:
                  - !GetAtt HttpApiDestination.Arn
                  

